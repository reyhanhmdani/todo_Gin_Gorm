package repository

import (
	"github.com/stretchr/testify/mock"
	"todoGin/model/entity"
)

// MockTodoRepository is an autogenerated mock type for the TodoRepository type
type MockTodoRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *MockTodoRepository) GetAll() ([]entity.Todolist, error) {
	ret := _m.Called()

	var r0 []entity.Todolist
	if rf, ok := ret.Get(0).(func() []entity.Todolist); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Todolist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *MockTodoRepository) GetByID(todoID int64) (*entity.Todolist, error) {
	ret := _m.Called(todoID)

	var r0 *entity.Todolist
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Todolist, error)); ok {
		return rf(todoID)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Todolist); ok {
		r0 = rf(todoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todolist)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(todoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *MockTodoRepository) Create(title string) (*entity.Todolist, error) {
	ret := _m.Called(title)

	var r0 *entity.Todolist
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Todolist, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Todolist); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todolist)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1

}

func (_m *MockTodoRepository) Update(todoID int64, updates map[string]interface{}) (*entity.Todolist, error) {

	ret := _m.Called(todoID, updates)

	var r0 *entity.Todolist
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, map[string]interface{}) (*entity.Todolist, error)); ok {
		return rf(todoID, updates)
	}
	if rf, ok := ret.Get(0).(func(int64, map[string]interface{}) *entity.Todolist); ok {
		r0 = rf(todoID, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todolist)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, map[string]interface{}) error); ok {
		r1 = rf(todoID, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *MockTodoRepository) Delete(todoID int64) (int64, error) {
	ret := _m.Called(todoID)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (int64, error)); ok {
		return rf(todoID)
	}
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(todoID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(todoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockTodoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockTodoRepository creates a new instance of MockTodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockTodoRepository(t mockConstructorTestingTNewMockTodoRepository) *MockTodoRepository {
	mock := &MockTodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
